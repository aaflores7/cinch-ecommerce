version: '3.8'

services:
  #--- Catalog Service ---
  catalog-app:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: catalog-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./services/catalog-service:/var/www
    depends_on:
      - db
    networks:
      - cinch-network

  catalog-nginx:
    image: nginx:alpine
    container_name: catalog-nginx
    restart: unless-stopped
    ports:
      - "8001:80"
    volumes:
      - ./services/catalog-service:/var/www
      - ./services/catalog-service/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - catalog-app
    networks:
      - cinch-network

  #--- Checkout Service ---
  checkout-app:
    build:
      context: ./services/checkout-service
      dockerfile: Dockerfile
    container_name: checkout-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./services/checkout-service:/var/www
    depends_on:
      - db
    networks:
      - cinch-network

  checkout-nginx:
    image: nginx:alpine
    container_name: checkout-nginx
    restart: unless-stopped
    ports:
      - "8002:80"
    volumes:
      - ./services/checkout-service:/var/www
      - ./services/checkout-service/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - checkout-app
    networks:
      - cinch-network

  #--- Email Service ---
  email-app:
    build:
      context: ./services/email-service
      dockerfile: Dockerfile
    container_name: email-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./services/email-service:/var/www
    depends_on:
      - db
    networks:
      - cinch-network

  email-nginx:
    image: nginx:alpine
    container_name: email-nginx
    restart: unless-stopped
    ports:
      - "8003:80"
    volumes:
      - ./services/email-service:/var/www
      - ./services/email-service/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - email-app
    networks:
      - cinch-network

  #--- Frontend Service ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cinch-frontend
    ports:
      - "8080:80"
    networks:
      - cinch-network

  #--- MySQL Database ---
  db:
    image: mysql:8.0
    container_name: cinch-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: cinch_db
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - cinch-network

# Docker Networks
networks:
  cinch-network:
    driver: bridge

# Volumes
volumes:
  db-data:
    driver: local